class {

    static byte[] md5(byte[] message) {
        val shiftConst = [7, 12, 17, 22, 5, 9, 14, 20, 4,11, 16, 23, 6, 10, 15, 21];
        val sineConst    = [
            0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee ,
            0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501 ,
            0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be ,
            0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821 ,
            0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa ,
            0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8 ,
            0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed ,
            0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a ,
            0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c ,
            0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70 ,
            0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05 ,
            0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665 ,
            0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039 ,
            0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1 ,
            0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1 ,
            0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
        ];

        val msgLen = message.length;
        int blockCount = ((msgLen + 8) >>> 6) + 1;
        int paddingLen = (blockCount << 6) - msgLen;

        //construct padding
        byte[] padding = with (new byte[paddingLen]) {
            this[0] = - 0x80;
            writeLongL(length - 8, (long) msgLen << 3);
        };
        var a = 0x67452301;
        var b = 0xEFCDAB89;
        var c = 0x98BADCFE;
        var d = 0x10325476;
        val buffer = new int[16];
        for (var i = 0; i < blockCount; i++) {
            var messageIndex = i << 6;
            for (var j = 0; j < 64; j++, messageIndex++) {
                val m = messageIndex < message.length ? message[messageIndex] : padding[messageIndex-message.length];
                buffer[j>>>2] = buffer[j>>>2] >>> 8 | m << 24;
            }
            var originalA = a;
            var originalB = b;
            var originalC = c;
            var originalD = d;
            for (var j = 0; j < 64; j++){
                var step = j >>> 4;
                var f = 0;
                var bufferIndex = j;
                if (step == 0) {
                    f = (b & c) | (~b & d);
                } else if (step == 1) {
                    f = (b & d) | (c & ~d);
                    bufferIndex = (bufferIndex * 5 + 1) & 0xF;
                } else if (step == 2) {
                    f = b ^ c ^ d;
                    bufferIndex = (bufferIndex * 3 + 5) & 0xF;
                } else if (step == 3) {
                    f = c ^ (b | ~d);
                    bufferIndex = (bufferIndex * 7) & 0xF;
                }
                int temp = b + Integer.rotateLeft(a + f + buffer[bufferIndex] + sineConst[j], shiftConst[(step << 2) | (j & 3)]);
                a = d;
                d = c;
                c = b;
                b = temp;
            }
            a += originalA;
            b += originalB;
            c += originalC;
            d += originalD;
        }
        return with(new byte[16]) {
            writeIntL(0, a);
            writeIntL(4, b);
            writeIntL(8, c);
            writeIntL(12, d);
        };
    }

    static String md5AsHex(byte[] data) {
        return toHex(md5(data));
    }

    private static String toHex(byte[] bytes) {
        val digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
        val chars = new char[bytes.length << 1];
        var ci = 0;
        for (var i = 0; i < bytes.length; i++) {
            byte b = bytes[i];
            chars[ci++] = digits[(b & 0xF0) >>> 4];
            chars[ci++] = digits[b & 0xF];
        }
        return new String(chars);
    }


}